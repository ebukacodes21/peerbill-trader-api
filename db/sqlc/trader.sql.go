// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: trader.sql

package db

import (
	"context"
	"database/sql"
)

const createTrader = `-- name: CreateTrader :one
INSERT INTO traders (
  first_name, last_name, username, password, email, country, phone
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, first_name, last_name, username, password, email, country, phone, role, profile_pic, created_at, is_verified
`

type CreateTraderParams struct {
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
	Username  string `db:"username" json:"username"`
	Password  string `db:"password" json:"password"`
	Email     string `db:"email" json:"email"`
	Country   string `db:"country" json:"country"`
	Phone     string `db:"phone" json:"phone"`
}

func (q *Queries) CreateTrader(ctx context.Context, arg CreateTraderParams) (Trader, error) {
	row := q.db.QueryRowContext(ctx, createTrader,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Country,
		arg.Phone,
	)
	var i Trader
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Country,
		&i.Phone,
		&i.Role,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.IsVerified,
	)
	return i, err
}

const getTrader = `-- name: GetTrader :one
SELECT id, first_name, last_name, username, password, email, country, phone, role, profile_pic, created_at, is_verified FROM traders 
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetTrader(ctx context.Context, username string) (Trader, error) {
	row := q.db.QueryRowContext(ctx, getTrader, username)
	var i Trader
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Country,
		&i.Phone,
		&i.Role,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.IsVerified,
	)
	return i, err
}

const getTraders = `-- name: GetTraders :many
SELECT id, first_name, last_name, username, password, email, country, phone, role, profile_pic, created_at, is_verified FROM traders 
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetTradersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTraders(ctx context.Context, arg GetTradersParams) ([]Trader, error) {
	rows, err := q.db.QueryContext(ctx, getTraders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trader{}
	for rows.Next() {
		var i Trader
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Country,
			&i.Phone,
			&i.Role,
			&i.ProfilePic,
			&i.CreatedAt,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrader = `-- name: UpdateTrader :one
UPDATE traders
SET
  first_name = COALESCE($1, first_name),
  last_name = COALESCE($2, last_name),
  username = COALESCE($3, username),
  password = COALESCE($4, password),
  email = COALESCE($5, email),
  phone = COALESCE($6, phone),
  country = COALESCE($7, country),
  is_verified = COALESCE($8, is_verified)
WHERE 
  id = $9
RETURNING id, first_name, last_name, username, password, email, country, phone, role, profile_pic, created_at, is_verified
`

type UpdateTraderParams struct {
	FirstName  sql.NullString `db:"first_name" json:"first_name"`
	LastName   sql.NullString `db:"last_name" json:"last_name"`
	Username   sql.NullString `db:"username" json:"username"`
	Password   sql.NullString `db:"password" json:"password"`
	Email      sql.NullString `db:"email" json:"email"`
	Phone      sql.NullString `db:"phone" json:"phone"`
	Country    sql.NullString `db:"country" json:"country"`
	IsVerified sql.NullBool   `db:"is_verified" json:"is_verified"`
	ID         int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateTrader(ctx context.Context, arg UpdateTraderParams) (Trader, error) {
	row := q.db.QueryRowContext(ctx, updateTrader,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Phone,
		arg.Country,
		arg.IsVerified,
		arg.ID,
	)
	var i Trader
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Country,
		&i.Phone,
		&i.Role,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.IsVerified,
	)
	return i, err
}
