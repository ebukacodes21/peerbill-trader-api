// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: buy_order.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBuyOrder = `-- name: CreateBuyOrder :one
INSERT INTO buy_orders (
  username, wallet_address, crypto, fiat, crypto_amount, fiat_amount, rate, duration
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, username, wallet_address, crypto, fiat, crypto_amount, fiat_amount, rate, is_accepted, is_completed, is_rejected, is_expired, created_at, duration
`

type CreateBuyOrderParams struct {
	Username      string    `db:"username" json:"username"`
	WalletAddress string    `db:"wallet_address" json:"wallet_address"`
	Crypto        string    `db:"crypto" json:"crypto"`
	Fiat          string    `db:"fiat" json:"fiat"`
	CryptoAmount  float64   `db:"crypto_amount" json:"crypto_amount"`
	FiatAmount    float64   `db:"fiat_amount" json:"fiat_amount"`
	Rate          float64   `db:"rate" json:"rate"`
	Duration      time.Time `db:"duration" json:"duration"`
}

func (q *Queries) CreateBuyOrder(ctx context.Context, arg CreateBuyOrderParams) (BuyOrder, error) {
	row := q.db.QueryRowContext(ctx, createBuyOrder,
		arg.Username,
		arg.WalletAddress,
		arg.Crypto,
		arg.Fiat,
		arg.CryptoAmount,
		arg.FiatAmount,
		arg.Rate,
		arg.Duration,
	)
	var i BuyOrder
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WalletAddress,
		&i.Crypto,
		&i.Fiat,
		&i.CryptoAmount,
		&i.FiatAmount,
		&i.Rate,
		&i.IsAccepted,
		&i.IsCompleted,
		&i.IsRejected,
		&i.IsExpired,
		&i.CreatedAt,
		&i.Duration,
	)
	return i, err
}

const getBuyOrder = `-- name: GetBuyOrder :one
SELECT id, username, wallet_address, crypto, fiat, crypto_amount, fiat_amount, rate, is_accepted, is_completed, is_rejected, is_expired, created_at, duration FROM buy_orders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBuyOrder(ctx context.Context, id int64) (BuyOrder, error) {
	row := q.db.QueryRowContext(ctx, getBuyOrder, id)
	var i BuyOrder
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WalletAddress,
		&i.Crypto,
		&i.Fiat,
		&i.CryptoAmount,
		&i.FiatAmount,
		&i.Rate,
		&i.IsAccepted,
		&i.IsCompleted,
		&i.IsRejected,
		&i.IsExpired,
		&i.CreatedAt,
		&i.Duration,
	)
	return i, err
}

const getBuyOrders = `-- name: GetBuyOrders :many
SELECT id, username, wallet_address, crypto, fiat, crypto_amount, fiat_amount, rate, is_accepted, is_completed, is_rejected, is_expired, created_at, duration FROM buy_orders
WHERE username = $1
ORDER BY id
`

func (q *Queries) GetBuyOrders(ctx context.Context, username string) ([]BuyOrder, error) {
	rows, err := q.db.QueryContext(ctx, getBuyOrders, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BuyOrder{}
	for rows.Next() {
		var i BuyOrder
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.WalletAddress,
			&i.Crypto,
			&i.Fiat,
			&i.CryptoAmount,
			&i.FiatAmount,
			&i.Rate,
			&i.IsAccepted,
			&i.IsCompleted,
			&i.IsRejected,
			&i.IsExpired,
			&i.CreatedAt,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuyOrder = `-- name: UpdateBuyOrder :one
UPDATE buy_orders
SET
  wallet_address = COALESCE($1, wallet_address),
  crypto = COALESCE($2, crypto),
  fiat = COALESCE($3, fiat),
  crypto_amount = COALESCE($4, crypto_amount),
  fiat_amount = COALESCE($5, fiat_amount),
  rate = COALESCE($6, rate),
  is_accepted = COALESCE($7, is_accepted),
  is_completed = COALESCE($8, is_completed),
  is_rejected = COALESCE($9, is_rejected),
  is_expired = COALESCE($10, is_expired),
  duration = COALESCE($11, duration)
WHERE 
  id = $12
  AND username = $13
RETURNING id, username, wallet_address, crypto, fiat, crypto_amount, fiat_amount, rate, is_accepted, is_completed, is_rejected, is_expired, created_at, duration
`

type UpdateBuyOrderParams struct {
	WalletAddress sql.NullString  `db:"wallet_address" json:"wallet_address"`
	Crypto        sql.NullString  `db:"crypto" json:"crypto"`
	Fiat          sql.NullString  `db:"fiat" json:"fiat"`
	CryptoAmount  sql.NullFloat64 `db:"crypto_amount" json:"crypto_amount"`
	FiatAmount    sql.NullFloat64 `db:"fiat_amount" json:"fiat_amount"`
	Rate          sql.NullFloat64 `db:"rate" json:"rate"`
	IsAccepted    sql.NullBool    `db:"is_accepted" json:"is_accepted"`
	IsCompleted   sql.NullBool    `db:"is_completed" json:"is_completed"`
	IsRejected    sql.NullBool    `db:"is_rejected" json:"is_rejected"`
	IsExpired     sql.NullBool    `db:"is_expired" json:"is_expired"`
	Duration      sql.NullTime    `db:"duration" json:"duration"`
	ID            int64           `db:"id" json:"id"`
	Username      string          `db:"username" json:"username"`
}

func (q *Queries) UpdateBuyOrder(ctx context.Context, arg UpdateBuyOrderParams) (BuyOrder, error) {
	row := q.db.QueryRowContext(ctx, updateBuyOrder,
		arg.WalletAddress,
		arg.Crypto,
		arg.Fiat,
		arg.CryptoAmount,
		arg.FiatAmount,
		arg.Rate,
		arg.IsAccepted,
		arg.IsCompleted,
		arg.IsRejected,
		arg.IsExpired,
		arg.Duration,
		arg.ID,
		arg.Username,
	)
	var i BuyOrder
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WalletAddress,
		&i.Crypto,
		&i.Fiat,
		&i.CryptoAmount,
		&i.FiatAmount,
		&i.Rate,
		&i.IsAccepted,
		&i.IsCompleted,
		&i.IsRejected,
		&i.IsExpired,
		&i.CreatedAt,
		&i.Duration,
	)
	return i, err
}
