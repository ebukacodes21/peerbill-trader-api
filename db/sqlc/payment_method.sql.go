// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment_method.sql

package db

import (
	"context"
	"database/sql"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_methods (
  username, trade_pair_id, bank_name, account_holder, account_number, wallet_address, crypto, fiat
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, trade_pair_id, username, wallet_address, crypto, fiat, bank_name, account_number, account_holder, created_at
`

type CreatePaymentMethodParams struct {
	Username      string `db:"username" json:"username"`
	TradePairID   int64  `db:"trade_pair_id" json:"trade_pair_id"`
	BankName      string `db:"bank_name" json:"bank_name"`
	AccountHolder string `db:"account_holder" json:"account_holder"`
	AccountNumber string `db:"account_number" json:"account_number"`
	WalletAddress string `db:"wallet_address" json:"wallet_address"`
	Crypto        string `db:"crypto" json:"crypto"`
	Fiat          string `db:"fiat" json:"fiat"`
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, createPaymentMethod,
		arg.Username,
		arg.TradePairID,
		arg.BankName,
		arg.AccountHolder,
		arg.AccountNumber,
		arg.WalletAddress,
		arg.Crypto,
		arg.Fiat,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.TradePairID,
		&i.Username,
		&i.WalletAddress,
		&i.Crypto,
		&i.Fiat,
		&i.BankName,
		&i.AccountNumber,
		&i.AccountHolder,
		&i.CreatedAt,
	)
	return i, err
}

const deletePaymentMethod = `-- name: DeletePaymentMethod :exec
DELETE FROM payment_methods
WHERE id = $1
AND username = $2
`

type DeletePaymentMethodParams struct {
	ID       int64  `db:"id" json:"id"`
	Username string `db:"username" json:"username"`
}

func (q *Queries) DeletePaymentMethod(ctx context.Context, arg DeletePaymentMethodParams) error {
	_, err := q.db.ExecContext(ctx, deletePaymentMethod, arg.ID, arg.Username)
	return err
}

const getPaymentMethod = `-- name: GetPaymentMethod :one
SELECT id, trade_pair_id, username, wallet_address, crypto, fiat, bank_name, account_number, account_holder, created_at FROM payment_methods 
WHERE username = $1
AND crypto = $2
AND fiat = $3
LIMIT 1
`

type GetPaymentMethodParams struct {
	Username string `db:"username" json:"username"`
	Crypto   string `db:"crypto" json:"crypto"`
	Fiat     string `db:"fiat" json:"fiat"`
}

func (q *Queries) GetPaymentMethod(ctx context.Context, arg GetPaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethod, arg.Username, arg.Crypto, arg.Fiat)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.TradePairID,
		&i.Username,
		&i.WalletAddress,
		&i.Crypto,
		&i.Fiat,
		&i.BankName,
		&i.AccountNumber,
		&i.AccountHolder,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentMethods = `-- name: GetPaymentMethods :many
SELECT id, trade_pair_id, username, wallet_address, crypto, fiat, bank_name, account_number, account_holder, created_at FROM payment_methods 
WHERE username = $1
ORDER BY id
`

func (q *Queries) GetPaymentMethods(ctx context.Context, username string) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentMethods, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.TradePairID,
			&i.Username,
			&i.WalletAddress,
			&i.Crypto,
			&i.Fiat,
			&i.BankName,
			&i.AccountNumber,
			&i.AccountHolder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :exec
UPDATE payment_methods
SET
  crypto = COALESCE($1, crypto),
  fiat = COALESCE($2, fiat),
  account_number = COALESCE($3, account_number),
  account_holder = COALESCE($4, account_holder),
  bank_name = COALESCE($5, bank_name),
  wallet_address = COALESCE($6, wallet_address)
WHERE 
  id = $7
AND username = $8
`

type UpdatePaymentMethodParams struct {
	Crypto        sql.NullString `db:"crypto" json:"crypto"`
	Fiat          sql.NullString `db:"fiat" json:"fiat"`
	AccountNumber sql.NullString `db:"account_number" json:"account_number"`
	AccountHolder sql.NullString `db:"account_holder" json:"account_holder"`
	BankName      sql.NullString `db:"bank_name" json:"bank_name"`
	WalletAddress sql.NullString `db:"wallet_address" json:"wallet_address"`
	ID            int64          `db:"id" json:"id"`
	Username      string         `db:"username" json:"username"`
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentMethod,
		arg.Crypto,
		arg.Fiat,
		arg.AccountNumber,
		arg.AccountHolder,
		arg.BankName,
		arg.WalletAddress,
		arg.ID,
		arg.Username,
	)
	return err
}
