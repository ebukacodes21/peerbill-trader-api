// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ebukacodes21/peerbill-trader-api/db/sqlc (interfaces: DatabaseContract)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "github.com/ebukacodes21/peerbill-trader-api/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDatabaseContract is a mock of DatabaseContract interface.
type MockDatabaseContract struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseContractMockRecorder
}

// MockDatabaseContractMockRecorder is the mock recorder for MockDatabaseContract.
type MockDatabaseContractMockRecorder struct {
	mock *MockDatabaseContract
}

// NewMockDatabaseContract creates a new mock instance.
func NewMockDatabaseContract(ctrl *gomock.Controller) *MockDatabaseContract {
	mock := &MockDatabaseContract{ctrl: ctrl}
	mock.recorder = &MockDatabaseContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseContract) EXPECT() *MockDatabaseContractMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockDatabaseContract) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDatabaseContractMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDatabaseContract)(nil).CreateSession), arg0, arg1)
}

// CreateTradePair mocks base method.
func (m *MockDatabaseContract) CreateTradePair(arg0 context.Context, arg1 db.CreateTradePairParams) (db.TradePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTradePair", arg0, arg1)
	ret0, _ := ret[0].(db.TradePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTradePair indicates an expected call of CreateTradePair.
func (mr *MockDatabaseContractMockRecorder) CreateTradePair(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTradePair", reflect.TypeOf((*MockDatabaseContract)(nil).CreateTradePair), arg0, arg1)
}

// CreateTrader mocks base method.
func (m *MockDatabaseContract) CreateTrader(arg0 context.Context, arg1 db.CreateTraderParams) (db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrader", arg0, arg1)
	ret0, _ := ret[0].(db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrader indicates an expected call of CreateTrader.
func (mr *MockDatabaseContractMockRecorder) CreateTrader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrader", reflect.TypeOf((*MockDatabaseContract)(nil).CreateTrader), arg0, arg1)
}

// CreateTraderTx mocks base method.
func (m *MockDatabaseContract) CreateTraderTx(arg0 context.Context, arg1 db.CreateTraderTxParams) (db.CreateTraderTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTraderTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateTraderTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraderTx indicates an expected call of CreateTraderTx.
func (mr *MockDatabaseContractMockRecorder) CreateTraderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraderTx", reflect.TypeOf((*MockDatabaseContract)(nil).CreateTraderTx), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockDatabaseContract) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockDatabaseContractMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockDatabaseContract)(nil).GetSession), arg0, arg1)
}

// GetTradePairs mocks base method.
func (m *MockDatabaseContract) GetTradePairs(arg0 context.Context, arg1 db.GetTradePairsParams) ([]db.TradePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradePairs", arg0, arg1)
	ret0, _ := ret[0].([]db.TradePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradePairs indicates an expected call of GetTradePairs.
func (mr *MockDatabaseContractMockRecorder) GetTradePairs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradePairs", reflect.TypeOf((*MockDatabaseContract)(nil).GetTradePairs), arg0, arg1)
}

// GetTrader mocks base method.
func (m *MockDatabaseContract) GetTrader(arg0 context.Context, arg1 string) (db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrader", arg0, arg1)
	ret0, _ := ret[0].(db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrader indicates an expected call of GetTrader.
func (mr *MockDatabaseContractMockRecorder) GetTrader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrader", reflect.TypeOf((*MockDatabaseContract)(nil).GetTrader), arg0, arg1)
}

// GetTraderCode mocks base method.
func (m *MockDatabaseContract) GetTraderCode(arg0 context.Context, arg1 string) (db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraderCode", arg0, arg1)
	ret0, _ := ret[0].(db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraderCode indicates an expected call of GetTraderCode.
func (mr *MockDatabaseContractMockRecorder) GetTraderCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraderCode", reflect.TypeOf((*MockDatabaseContract)(nil).GetTraderCode), arg0, arg1)
}

// GetTraders mocks base method.
func (m *MockDatabaseContract) GetTraders(arg0 context.Context, arg1 db.GetTradersParams) ([]db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraders", arg0, arg1)
	ret0, _ := ret[0].([]db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraders indicates an expected call of GetTraders.
func (mr *MockDatabaseContractMockRecorder) GetTraders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraders", reflect.TypeOf((*MockDatabaseContract)(nil).GetTraders), arg0, arg1)
}

// UpdateTrader mocks base method.
func (m *MockDatabaseContract) UpdateTrader(arg0 context.Context, arg1 db.UpdateTraderParams) (db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrader", arg0, arg1)
	ret0, _ := ret[0].(db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrader indicates an expected call of UpdateTrader.
func (mr *MockDatabaseContractMockRecorder) UpdateTrader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrader", reflect.TypeOf((*MockDatabaseContract)(nil).UpdateTrader), arg0, arg1)
}
