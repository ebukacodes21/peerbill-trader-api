// Code generated by MockGen. DO NOT EDIT.
// Source: peerbill-trader-server/db/sqlc (interfaces: DatabaseContract)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "peerbill-trader-server/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDatabaseContract is a mock of DatabaseContract interface.
type MockDatabaseContract struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseContractMockRecorder
}

// MockDatabaseContractMockRecorder is the mock recorder for MockDatabaseContract.
type MockDatabaseContractMockRecorder struct {
	mock *MockDatabaseContract
}

// NewMockDatabaseContract creates a new mock instance.
func NewMockDatabaseContract(ctrl *gomock.Controller) *MockDatabaseContract {
	mock := &MockDatabaseContract{ctrl: ctrl}
	mock.recorder = &MockDatabaseContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseContract) EXPECT() *MockDatabaseContractMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockDatabaseContract) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDatabaseContractMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDatabaseContract)(nil).CreateSession), arg0, arg1)
}

// CreateTradePair mocks base method.
func (m *MockDatabaseContract) CreateTradePair(arg0 context.Context, arg1 db.CreateTradePairParams) (db.TradePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTradePair", arg0, arg1)
	ret0, _ := ret[0].(db.TradePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTradePair indicates an expected call of CreateTradePair.
func (mr *MockDatabaseContractMockRecorder) CreateTradePair(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTradePair", reflect.TypeOf((*MockDatabaseContract)(nil).CreateTradePair), arg0, arg1)
}

// CreateTrader mocks base method.
func (m *MockDatabaseContract) CreateTrader(arg0 context.Context, arg1 db.CreateTraderParams) (db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrader", arg0, arg1)
	ret0, _ := ret[0].(db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrader indicates an expected call of CreateTrader.
func (mr *MockDatabaseContractMockRecorder) CreateTrader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrader", reflect.TypeOf((*MockDatabaseContract)(nil).CreateTrader), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockDatabaseContract) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockDatabaseContractMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockDatabaseContract)(nil).CreateVerifyEmail), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockDatabaseContract) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockDatabaseContractMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockDatabaseContract)(nil).GetSession), arg0, arg1)
}

// GetTrader mocks base method.
func (m *MockDatabaseContract) GetTrader(arg0 context.Context, arg1 string) (db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrader", arg0, arg1)
	ret0, _ := ret[0].(db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrader indicates an expected call of GetTrader.
func (mr *MockDatabaseContractMockRecorder) GetTrader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrader", reflect.TypeOf((*MockDatabaseContract)(nil).GetTrader), arg0, arg1)
}

// UpdateTrader mocks base method.
func (m *MockDatabaseContract) UpdateTrader(arg0 context.Context, arg1 db.UpdateTraderParams) (db.Trader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrader", arg0, arg1)
	ret0, _ := ret[0].(db.Trader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrader indicates an expected call of UpdateTrader.
func (mr *MockDatabaseContractMockRecorder) UpdateTrader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrader", reflect.TypeOf((*MockDatabaseContract)(nil).UpdateTrader), arg0, arg1)
}
