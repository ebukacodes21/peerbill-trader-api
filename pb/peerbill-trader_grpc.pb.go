// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: peerbill-trader.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PeerBillTrader_RegisterTrader_FullMethodName = "/pb.PeerBillTrader/RegisterTrader"
	PeerBillTrader_LoginTrader_FullMethodName    = "/pb.PeerBillTrader/LoginTrader"
	PeerBillTrader_UpdateTrader_FullMethodName   = "/pb.PeerBillTrader/UpdateTrader"
)

// PeerBillTraderClient is the client API for PeerBillTrader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerBillTraderClient interface {
	RegisterTrader(ctx context.Context, in *RegisterTraderRequest, opts ...grpc.CallOption) (*RegisterTraderResponse, error)
	LoginTrader(ctx context.Context, in *LoginTraderRequest, opts ...grpc.CallOption) (*LoginTraderResponse, error)
	UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error)
}

type peerBillTraderClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerBillTraderClient(cc grpc.ClientConnInterface) PeerBillTraderClient {
	return &peerBillTraderClient{cc}
}

func (c *peerBillTraderClient) RegisterTrader(ctx context.Context, in *RegisterTraderRequest, opts ...grpc.CallOption) (*RegisterTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTraderResponse)
	err := c.cc.Invoke(ctx, PeerBillTrader_RegisterTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerBillTraderClient) LoginTrader(ctx context.Context, in *LoginTraderRequest, opts ...grpc.CallOption) (*LoginTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginTraderResponse)
	err := c.cc.Invoke(ctx, PeerBillTrader_LoginTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerBillTraderClient) UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTraderResponse)
	err := c.cc.Invoke(ctx, PeerBillTrader_UpdateTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerBillTraderServer is the server API for PeerBillTrader service.
// All implementations must embed UnimplementedPeerBillTraderServer
// for forward compatibility.
type PeerBillTraderServer interface {
	RegisterTrader(context.Context, *RegisterTraderRequest) (*RegisterTraderResponse, error)
	LoginTrader(context.Context, *LoginTraderRequest) (*LoginTraderResponse, error)
	UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error)
	mustEmbedUnimplementedPeerBillTraderServer()
}

// UnimplementedPeerBillTraderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeerBillTraderServer struct{}

func (UnimplementedPeerBillTraderServer) RegisterTrader(context.Context, *RegisterTraderRequest) (*RegisterTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTrader not implemented")
}
func (UnimplementedPeerBillTraderServer) LoginTrader(context.Context, *LoginTraderRequest) (*LoginTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginTrader not implemented")
}
func (UnimplementedPeerBillTraderServer) UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrader not implemented")
}
func (UnimplementedPeerBillTraderServer) mustEmbedUnimplementedPeerBillTraderServer() {}
func (UnimplementedPeerBillTraderServer) testEmbeddedByValue()                        {}

// UnsafePeerBillTraderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerBillTraderServer will
// result in compilation errors.
type UnsafePeerBillTraderServer interface {
	mustEmbedUnimplementedPeerBillTraderServer()
}

func RegisterPeerBillTraderServer(s grpc.ServiceRegistrar, srv PeerBillTraderServer) {
	// If the following call pancis, it indicates UnimplementedPeerBillTraderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PeerBillTrader_ServiceDesc, srv)
}

func _PeerBillTrader_RegisterTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerBillTraderServer).RegisterTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerBillTrader_RegisterTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerBillTraderServer).RegisterTrader(ctx, req.(*RegisterTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerBillTrader_LoginTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerBillTraderServer).LoginTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerBillTrader_LoginTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerBillTraderServer).LoginTrader(ctx, req.(*LoginTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerBillTrader_UpdateTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerBillTraderServer).UpdateTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerBillTrader_UpdateTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerBillTraderServer).UpdateTrader(ctx, req.(*UpdateTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerBillTrader_ServiceDesc is the grpc.ServiceDesc for PeerBillTrader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerBillTrader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PeerBillTrader",
	HandlerType: (*PeerBillTraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTrader",
			Handler:    _PeerBillTrader_RegisterTrader_Handler,
		},
		{
			MethodName: "LoginTrader",
			Handler:    _PeerBillTrader_LoginTrader_Handler,
		},
		{
			MethodName: "UpdateTrader",
			Handler:    _PeerBillTrader_UpdateTrader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peerbill-trader.proto",
}
