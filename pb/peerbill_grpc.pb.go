// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: peerbill.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Peerbill_RegisterTrader_FullMethodName = "/pb.Peerbill/RegisterTrader"
	Peerbill_LoginTrader_FullMethodName    = "/pb.Peerbill/LoginTrader"
	Peerbill_UpdateTrader_FullMethodName   = "/pb.Peerbill/UpdateTrader"
	Peerbill_VerifyEmail_FullMethodName    = "/pb.Peerbill/VerifyEmail"
	Peerbill_SubscribeRate_FullMethodName  = "/pb.Peerbill/SubscribeRate"
)

// PeerbillClient is the client API for Peerbill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerbillClient interface {
	RegisterTrader(ctx context.Context, in *RegisterTraderRequest, opts ...grpc.CallOption) (*RegisterTraderResponse, error)
	LoginTrader(ctx context.Context, in *LoginTraderRequest, opts ...grpc.CallOption) (*LoginTraderResponse, error)
	UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	SubscribeRate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRateRequest, SubscribeRateResponse], error)
}

type peerbillClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerbillClient(cc grpc.ClientConnInterface) PeerbillClient {
	return &peerbillClient{cc}
}

func (c *peerbillClient) RegisterTrader(ctx context.Context, in *RegisterTraderRequest, opts ...grpc.CallOption) (*RegisterTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTraderResponse)
	err := c.cc.Invoke(ctx, Peerbill_RegisterTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillClient) LoginTrader(ctx context.Context, in *LoginTraderRequest, opts ...grpc.CallOption) (*LoginTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginTraderResponse)
	err := c.cc.Invoke(ctx, Peerbill_LoginTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillClient) UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTraderResponse)
	err := c.cc.Invoke(ctx, Peerbill_UpdateTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Peerbill_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillClient) SubscribeRate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRateRequest, SubscribeRateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Peerbill_ServiceDesc.Streams[0], Peerbill_SubscribeRate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRateRequest, SubscribeRateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Peerbill_SubscribeRateClient = grpc.BidiStreamingClient[SubscribeRateRequest, SubscribeRateResponse]

// PeerbillServer is the server API for Peerbill service.
// All implementations must embed UnimplementedPeerbillServer
// for forward compatibility.
type PeerbillServer interface {
	RegisterTrader(context.Context, *RegisterTraderRequest) (*RegisterTraderResponse, error)
	LoginTrader(context.Context, *LoginTraderRequest) (*LoginTraderResponse, error)
	UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	SubscribeRate(grpc.BidiStreamingServer[SubscribeRateRequest, SubscribeRateResponse]) error
	mustEmbedUnimplementedPeerbillServer()
}

// UnimplementedPeerbillServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeerbillServer struct{}

func (UnimplementedPeerbillServer) RegisterTrader(context.Context, *RegisterTraderRequest) (*RegisterTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTrader not implemented")
}
func (UnimplementedPeerbillServer) LoginTrader(context.Context, *LoginTraderRequest) (*LoginTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginTrader not implemented")
}
func (UnimplementedPeerbillServer) UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrader not implemented")
}
func (UnimplementedPeerbillServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedPeerbillServer) SubscribeRate(grpc.BidiStreamingServer[SubscribeRateRequest, SubscribeRateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRate not implemented")
}
func (UnimplementedPeerbillServer) mustEmbedUnimplementedPeerbillServer() {}
func (UnimplementedPeerbillServer) testEmbeddedByValue()                  {}

// UnsafePeerbillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerbillServer will
// result in compilation errors.
type UnsafePeerbillServer interface {
	mustEmbedUnimplementedPeerbillServer()
}

func RegisterPeerbillServer(s grpc.ServiceRegistrar, srv PeerbillServer) {
	// If the following call pancis, it indicates UnimplementedPeerbillServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Peerbill_ServiceDesc, srv)
}

func _Peerbill_RegisterTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillServer).RegisterTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Peerbill_RegisterTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillServer).RegisterTrader(ctx, req.(*RegisterTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peerbill_LoginTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillServer).LoginTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Peerbill_LoginTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillServer).LoginTrader(ctx, req.(*LoginTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peerbill_UpdateTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillServer).UpdateTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Peerbill_UpdateTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillServer).UpdateTrader(ctx, req.(*UpdateTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peerbill_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Peerbill_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peerbill_SubscribeRate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerbillServer).SubscribeRate(&grpc.GenericServerStream[SubscribeRateRequest, SubscribeRateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Peerbill_SubscribeRateServer = grpc.BidiStreamingServer[SubscribeRateRequest, SubscribeRateResponse]

// Peerbill_ServiceDesc is the grpc.ServiceDesc for Peerbill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Peerbill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Peerbill",
	HandlerType: (*PeerbillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTrader",
			Handler:    _Peerbill_RegisterTrader_Handler,
		},
		{
			MethodName: "LoginTrader",
			Handler:    _Peerbill_LoginTrader_Handler,
		},
		{
			MethodName: "UpdateTrader",
			Handler:    _Peerbill_UpdateTrader_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Peerbill_VerifyEmail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRate",
			Handler:       _Peerbill_SubscribeRate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peerbill.proto",
}
