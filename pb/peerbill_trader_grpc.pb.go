// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: peerbill_trader.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PeerbillTrader_RegisterTrader_FullMethodName = "/pb.PeerbillTrader/RegisterTrader"
	PeerbillTrader_LoginTrader_FullMethodName    = "/pb.PeerbillTrader/LoginTrader"
	PeerbillTrader_UpdateTrader_FullMethodName   = "/pb.PeerbillTrader/UpdateTrader"
	PeerbillTrader_VerifyEmail_FullMethodName    = "/pb.PeerbillTrader/VerifyEmail"
)

// PeerbillTraderClient is the client API for PeerbillTrader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerbillTraderClient interface {
	RegisterTrader(ctx context.Context, in *RegisterTraderRequest, opts ...grpc.CallOption) (*RegisterTraderResponse, error)
	LoginTrader(ctx context.Context, in *LoginTraderRequest, opts ...grpc.CallOption) (*LoginTraderResponse, error)
	UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
}

type peerbillTraderClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerbillTraderClient(cc grpc.ClientConnInterface) PeerbillTraderClient {
	return &peerbillTraderClient{cc}
}

func (c *peerbillTraderClient) RegisterTrader(ctx context.Context, in *RegisterTraderRequest, opts ...grpc.CallOption) (*RegisterTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTraderResponse)
	err := c.cc.Invoke(ctx, PeerbillTrader_RegisterTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillTraderClient) LoginTrader(ctx context.Context, in *LoginTraderRequest, opts ...grpc.CallOption) (*LoginTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginTraderResponse)
	err := c.cc.Invoke(ctx, PeerbillTrader_LoginTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillTraderClient) UpdateTrader(ctx context.Context, in *UpdateTraderRequest, opts ...grpc.CallOption) (*UpdateTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTraderResponse)
	err := c.cc.Invoke(ctx, PeerbillTrader_UpdateTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerbillTraderClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, PeerbillTrader_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerbillTraderServer is the server API for PeerbillTrader service.
// All implementations must embed UnimplementedPeerbillTraderServer
// for forward compatibility.
type PeerbillTraderServer interface {
	RegisterTrader(context.Context, *RegisterTraderRequest) (*RegisterTraderResponse, error)
	LoginTrader(context.Context, *LoginTraderRequest) (*LoginTraderResponse, error)
	UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	mustEmbedUnimplementedPeerbillTraderServer()
}

// UnimplementedPeerbillTraderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeerbillTraderServer struct{}

func (UnimplementedPeerbillTraderServer) RegisterTrader(context.Context, *RegisterTraderRequest) (*RegisterTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTrader not implemented")
}
func (UnimplementedPeerbillTraderServer) LoginTrader(context.Context, *LoginTraderRequest) (*LoginTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginTrader not implemented")
}
func (UnimplementedPeerbillTraderServer) UpdateTrader(context.Context, *UpdateTraderRequest) (*UpdateTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrader not implemented")
}
func (UnimplementedPeerbillTraderServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedPeerbillTraderServer) mustEmbedUnimplementedPeerbillTraderServer() {}
func (UnimplementedPeerbillTraderServer) testEmbeddedByValue()                        {}

// UnsafePeerbillTraderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerbillTraderServer will
// result in compilation errors.
type UnsafePeerbillTraderServer interface {
	mustEmbedUnimplementedPeerbillTraderServer()
}

func RegisterPeerbillTraderServer(s grpc.ServiceRegistrar, srv PeerbillTraderServer) {
	// If the following call pancis, it indicates UnimplementedPeerbillTraderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PeerbillTrader_ServiceDesc, srv)
}

func _PeerbillTrader_RegisterTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillTraderServer).RegisterTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillTrader_RegisterTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillTraderServer).RegisterTrader(ctx, req.(*RegisterTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillTrader_LoginTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillTraderServer).LoginTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillTrader_LoginTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillTraderServer).LoginTrader(ctx, req.(*LoginTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillTrader_UpdateTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillTraderServer).UpdateTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillTrader_UpdateTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillTraderServer).UpdateTrader(ctx, req.(*UpdateTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerbillTrader_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerbillTraderServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerbillTrader_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerbillTraderServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerbillTrader_ServiceDesc is the grpc.ServiceDesc for PeerbillTrader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerbillTrader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PeerbillTrader",
	HandlerType: (*PeerbillTraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTrader",
			Handler:    _PeerbillTrader_RegisterTrader_Handler,
		},
		{
			MethodName: "LoginTrader",
			Handler:    _PeerbillTrader_LoginTrader_Handler,
		},
		{
			MethodName: "UpdateTrader",
			Handler:    _PeerbillTrader_UpdateTrader_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _PeerbillTrader_VerifyEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peerbill_trader.proto",
}
