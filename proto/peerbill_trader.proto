syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "rpc_register_trader.proto";
import "rpc_login_trader.proto";
import "rpc_logout_trader.proto";
import "rpc_update_trader.proto";
import "rpc_verify_email.proto";
import "rpc_get_traders.proto";
import "rpc_forgot_password.proto";
import "rpc_reset.proto";
import "rpc_add_trade_pair.proto";
import "rpc_update_trade_pair.proto";
import "rpc_delete_trade_pair.proto";
import "rpc_create_buy_order.proto";
import "rpc_get_buy_orders.proto";
import "rpc_get_buy_order.proto";
import "rpc_reject_buy.proto";
import "rpc_add_payment_method.proto";
import "rpc_update_payment_method.proto";
import "rpc_delete_payment_method.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "peerbill-trader-api/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Peerbill"
      version: "1.2"
      contact: {
        name: "Peerbill"
        url: ""
        email: "peerbillofficial@gmail.com"
      }
    }
};

service PeerbillTrader {
    rpc RegisterTrader (RegisterTraderRequest) returns (RegisterTraderResponse) {
        option (google.api.http) = {
            post: "/api/register-trader"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create a new trader";
            summary: "create a new trader";
        };
    }
    rpc LoginTrader (LoginTraderRequest) returns (LoginTraderResponse) {
        option (google.api.http) = {
            post: "/api/login-trader"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to login trader";
            summary: "login trader";
        };
    }
    rpc LogoutTrader (LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/api/logout-trader"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to logout trader";
            summary: "logout trader";
        };
    }
    rpc UpdateTrader (UpdateTraderRequest) returns (UpdateTraderResponse) {
        option (google.api.http) = {
            patch: "/api/update-trader"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update a trader";
            summary: "update a trader";
        };
    }
    rpc VerifyEmail (VerifyEmailRequest) returns (VerifyEmailResponse) {
        option (google.api.http) = {
            post: "/api/verify"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to verify email address";
            summary: "verify email address";
        };
    }
    rpc Forgot (ForgotPasswordRequest) returns (ForgotPasswordResponse) {
        option (google.api.http) = {
            post: "/api/forgot"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to send password reset link";
            summary: "Send password reset link";
        };
    }
    rpc Reset (ResetPasswordRequest) returns (ResetPasswordResponse) {
        option (google.api.http) = {
            post: "/api/reset"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to reset password";
            summary: "Password reset link";
        };
    }
    rpc GetTraders (GetTradersRequest) returns (GetTradersResponse) {
        option (google.api.http) = {
            post: "/api/get-traders"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get list of traders";
            summary: "Get a list of traders";
        };
    }
    rpc AddTraderPair (AddTradePairRequest) returns (AddTradePairResponse) {
        option (google.api.http) = {
            post: "/api/add-trader-pair"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to add Crypto/Fiat pairs";
            summary: "Add Crypto/Fiat pairs";
        };
    }
    rpc UpdateTraderPair (UpdateTradePairRequest) returns (UpdateTradePairResponse) {
        option (google.api.http) = {
            patch: "/api/update-trader-pair"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update Crypto/Fiat pairs";
            summary: "Update Crypto/Fiat pairs";
        };
    }
    rpc DeleteTraderPair (DeleteTradePairRequest) returns (DeleteTradePairResponse) {
        option (google.api.http) = {
            post: "/api/delete-trader-pair"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to delete Crypto/Fiat pairs";
            summary: "Delete Crypto/Fiat pairs";
        };
    }
    rpc CreateBuyOrder (CreateBuyOrderRequest) returns (CreateBuyOrderResponse) {
        option (google.api.http) = {
            post: "/api/create-buy-order"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to create buy order";
            summary: "Create buy order";
        };
    }
    rpc GetBuyOrders (GetBuyOrdersRequest) returns (GetBuyOrdersResponse) {
        option (google.api.http) = {
            post: "/api/get-buy-orders"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get buy orders";
            summary: "Get buy orders";
        };
    }
    rpc GetBuyOrder (GetBuyOrderRequest) returns (GetBuyOrderResponse) {
        option (google.api.http) = {
            post: "/api/get-buy-order"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to get buy a single buy order";
            summary: "Get a single buy order";
        };
    }
    rpc RejectBuyOrder (RejectBuyOrderRequest) returns (RejectBuyOrderResponse) {
        option (google.api.http) = {
            post: "/api/reject-buy"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to reject a buy order";
            summary: "Reject a buy order";
        };
    }
    rpc AddPaymentMethod (AddPaymentMethodRequest) returns (AddPaymentMethodResponse) {
        option (google.api.http) = {
            post: "/api/add-trader-payment-method"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to add Crypto/Fiat payment method";
            summary: "Add Crypto/Fiat payment method";
        };
    }
    rpc UpdatePaymentMethod (UpdatePaymentMethodRequest) returns (UpdatePaymentMethodResponse) {
        option (google.api.http) = {
            patch: "/api/update-trader-payment-method"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update Crypto/Fiat payment methods";
            summary: "Update Crypto/Fiat payment methods";
        };
    }
    rpc DeletePaymentMethod (DeletePaymentMethodRequest) returns (DeletePaymentMethodResponse) {
        option (google.api.http) = {
            post: "/api/delete-trader-payment-method"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to delete Crypto/Fiat payment method";
            summary: "Delete Crypto/Fiat payment method";
        };
    }
}